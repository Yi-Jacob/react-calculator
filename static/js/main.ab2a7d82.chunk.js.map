{"version":3,"sources":["serviceWorker.ts","components/Display/Display.tsx","components/Button/Button.tsx","components/Pad/Pad.tsx","components/App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","StyledIndicatorList","styled","div","StyledExpression","span","StyleScreen","StyledDisplay","Screen","value","hasMemory","expression","StyledButton","button","color","css","colorToCss","isLarge","Button","children","onClick","StyledPad","Pad","onDigitButtonClick","onPointButtonClick","onOperatorButtonClick","onChangeSignButtonClick","onEqualButtonClick","onAllClearButtonClick","onClearEntryButtonClick","onMemoryRecallButtonClick","onMemoryPlusButtonClick","onMemoryMinusButtonClick","handleKeyDown","keyCode","shiftKey","console","log","useEffect","document","body","addEventListener","removeEventListener","StyledApp","App","useState","memory","setMemory","result","setResult","waitingForOperand","setWaitingForOperand","pendingOperator","setPendingOperator","display","setDisplay","calculate","rightOperand","newResult","toString","slice","Display","digit","newDisplay","length","indexOf","operator","operand","Number","undefined","onMemoryClearButtonClick","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab2a7d82.chunk.js","sourcesContent":["\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FunctionComponent } from 'react'\nimport styled from 'styled-components'\n\ninterface DisplayProps {\n  hasMemory: boolean\n  expression: string\n  value: string\n}\n\nconst StyledIndicatorList = styled.div`\n  font-size: 0.75em;\n  line-height: 1;\n  opacity: 0.4;\n  text-align: right;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 0.25em;\n  min-height: 1em;\n`\n\nconst StyledExpression = styled.span`\n  margin-left: auto;\n`\n\nconst StyleScreen = styled.div`\n  font-size: 2.5em;\n  min-height: 1.4em;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  overflow: hidden;\n`\n\nconst StyledDisplay = styled.div`\n  background-color: #393939;\n  color: #fff;\n  padding: 1.5em 1em;\n`\n\nexport const Screen: FunctionComponent<DisplayProps> = ({ value, hasMemory, expression }) => {\n  return (\n    <>\n    <h3>Jacob Yi React Calculator</h3>\n    <StyledDisplay>\n      <StyledIndicatorList>\n        {hasMemory &&\n          <span>M</span>\n        }\n\n        <StyledExpression>\n          {expression}\n        </StyledExpression>\n      </StyledIndicatorList>\n\n      <StyleScreen>\n        {value}\n      </StyleScreen>\n    </StyledDisplay>\n    </>\n  )\n}\n\nexport default Screen\n","import React, { FunctionComponent } from 'react'\n\nimport styled, { css } from 'styled-components'\n\ninterface ButtonProps {\n  color?: 'red' | 'green' | 'dark'\n  isLarge?: boolean\n  onClick?: () => void\n}\n\nconst colorToCss = (color: ButtonProps['color']) => {\n  switch (color) {\n    case 'red':\n      return css`\n        background-color: #c04444;\n        color: #fff;\n\n        &:hover,\n        &:focus {\n          background-color: #af3b3b;\n        }\n      `\n    case 'green':\n      return css`\n        background-color: #018645;\n        color: #fff;\n\n        &:hover,\n        &:focus {\n          background-color: #016d38;\n        }\n      `\n    case 'dark':\n      return css`\n        background-color: #272727;\n        color: #c5830d;\n\n        &:hover,\n        &:focus {\n          background-color: #1a1a1a;\n        }\n      `\n  }\n\n  return css`\n    background-color: #2e2e2e;\n    color: #fff;\n\n    &:hover,\n    &:focus {\n      background-color: #212121;\n    }\n  `\n}\n\nexport const StyledButton = styled.button<ButtonProps>`\n  font-family: inherit;\n  font-size: inherit;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  border-radius: 0;\n  padding-top: 1em;\n  padding-bottom: 1em;\n  transition: background-color 0.15s ease-in-out, opacity 0.15s ease-in-out;\n  ${({ color }) => colorToCss(color)}\n  ${({ isLarge }) =>\n    isLarge &&\n    css`\n      grid-column-end: span 2;\n    `}\n\n  position: relative;\n  overflow: hidden;\n  transform: translate3d(0, 0, 0);\n\n  &:focus {\n    outline: 0;\n  }\n\n  :after {\n    content: '';\n    display: block;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    pointer-events: none;\n    background-image: radial-gradient(circle, #fff 10%, transparent 10.01%);\n    background-repeat: no-repeat;\n    background-position: 50%;\n    transform: scale(10, 10);\n    opacity: 0;\n    transition: transform 0.3s, opacity 1s;\n  }\n\n  :active:after {\n    transform: scale(0, 0);\n    opacity: 0.2;\n    transition: 0s;\n  }\n`\n\nexport const Button: FunctionComponent<ButtonProps> = ({ children, color, isLarge, onClick }) => {\n  return (\n    <StyledButton color={color} isLarge={isLarge} onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default Button\n","import React, { FunctionComponent, useEffect } from 'react'\nimport styled from 'styled-components'\nimport Button from '../Button/Button'\nimport { Digit, Operator } from '../../lib/types'\n\ninterface PadProps {\n  onDigitButtonClick: (digit: Digit) => void\n  onPointButtonClick: () => void\n  onOperatorButtonClick: (operator: Operator) => void\n  onChangeSignButtonClick: () => void\n  onEqualButtonClick: () => void\n  onAllClearButtonClick: () => void\n  onClearEntryButtonClick: () => void\n  onMemoryRecallButtonClick: () => void\n  onMemoryClearButtonClick: () => void\n  onMemoryPlusButtonClick: () => void\n  onMemoryMinusButtonClick: () => void\n}\n\nconst StyledPad = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-auto-rows: 1fr;\n`\n\nexport const Pad: FunctionComponent<PadProps> = ({\n  onDigitButtonClick,\n  onPointButtonClick,\n  onOperatorButtonClick,\n  onChangeSignButtonClick,\n  onEqualButtonClick,\n  onAllClearButtonClick,\n  onClearEntryButtonClick,\n  onMemoryRecallButtonClick,\n  onMemoryPlusButtonClick,\n  onMemoryMinusButtonClick\n}) => {\n  const handleKeyDown = ({ keyCode, shiftKey }: KeyboardEvent) => {\n    console.log(keyCode)\n    if (keyCode >= 48 && keyCode <= 57 && !shiftKey) {\n      onDigitButtonClick((keyCode - 48) as Digit)\n    } else if ((keyCode >= 96 && keyCode <= 105)) {\n      onDigitButtonClick((keyCode - 96) as Digit)\n    } else if (keyCode === 107 || (keyCode === 187 && shiftKey)) {\n      onOperatorButtonClick('+')\n    } else if (keyCode === 109 || keyCode === 189) {\n      onOperatorButtonClick('-')\n    } else if (keyCode === 106 || (keyCode === 56 && shiftKey)) {\n      onOperatorButtonClick('×')\n    } else if (keyCode === 111 || keyCode === 191) {\n      onOperatorButtonClick('÷')\n    } else if (keyCode === 13 || (keyCode === 187 && !shiftKey)) {\n      onEqualButtonClick()\n    } else if (keyCode === 46) {\n      onClearEntryButtonClick()\n    } else if (keyCode === 27) {\n      onAllClearButtonClick()\n    } else if (keyCode === 78) {\n      onChangeSignButtonClick()\n    } else if (keyCode === 80) {\n      onMemoryPlusButtonClick()\n    } else if (keyCode === 81) {\n      onMemoryMinusButtonClick()\n    } else if (keyCode === 82) {\n      onMemoryRecallButtonClick()\n    }\n  }\n\n  useEffect(() => {\n    document.body.addEventListener('keydown', handleKeyDown)\n    return () => document.body.removeEventListener('keydown', handleKeyDown)\n  })\n\n  return (\n    <>\n    <StyledPad>\n      {/* <Button onClick={onMemoryRecallButtonClick}>\n        MR\n      </Button>\n      <Button onClick={onMemoryClearButtonClick}>\n        MC\n      </Button>\n      <Button onClick={onMemoryPlusButtonClick}>\n        M+\n      </Button>\n      <Button onClick={onMemoryMinusButtonClick}>\n        M-\n      </Button> */}\n      <Button color=\"red\" onClick={onAllClearButtonClick}>\n        AC\n      </Button>\n      <Button onClick={onClearEntryButtonClick}>\n        C\n      </Button>\n      <Button onClick={onChangeSignButtonClick}>\n        -/+\n      </Button>\n      <Button color=\"dark\" onClick={() => onOperatorButtonClick('÷')}>\n        ÷\n      </Button>\n      <Button onClick={() => onDigitButtonClick(7)}>\n        7\n      </Button>\n      <Button onClick={() => onDigitButtonClick(8)}>\n        8\n      </Button>\n      <Button onClick={() => onDigitButtonClick(9)}>\n        9\n      </Button>\n      <Button color=\"dark\" onClick={() => onOperatorButtonClick('×')}>\n        ×\n      </Button>\n      <Button onClick={() => onDigitButtonClick(4)}>\n        4\n      </Button>\n      <Button onClick={() => onDigitButtonClick(5)}>\n        5\n      </Button>\n      <Button onClick={() => onDigitButtonClick(6)}>\n        6\n      </Button>\n      <Button color=\"dark\" onClick={() => onOperatorButtonClick('-')}>\n        -\n      </Button>\n      <Button onClick={() => onDigitButtonClick(1)}>\n        1\n      </Button>\n      <Button onClick={() => onDigitButtonClick(2)}>\n        2\n      </Button>\n      <Button onClick={() => onDigitButtonClick(3)}>\n        3\n      </Button>\n      <Button color=\"dark\" onClick={() => onOperatorButtonClick('+')}>\n        +\n      </Button>\n      <Button onClick={() => onDigitButtonClick(0)}>\n        0\n      </Button>\n      <Button onClick={onPointButtonClick}>\n        .\n      </Button>\n      <Button color=\"green\" isLarge={true} onClick={onEqualButtonClick}>\n        =\n      </Button>\n    </StyledPad>\n    </>\n  )\n}\n\nexport default Pad\n","import React, { FunctionComponent, useState } from 'react'\nimport styled from 'styled-components'\nimport Display from '../Display/Display'\nimport Pad from '../Pad/Pad'\nimport { Digit, Operator } from '../../lib/types'\n\nconst StyledApp = styled.div`\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\" ,Arial ,sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-size: 16px;\n  width: 100%;\n  max-width: 320px;\n`\n\nexport const App: FunctionComponent = () => {\n  // Calculator's states\n  const [memory, setMemory] = useState<number>(0)\n  const [result, setResult] = useState<number>(0)\n  const [waitingForOperand, setWaitingForOperand] = useState<boolean>(true)\n  const [pendingOperator, setPendingOperator] = useState<Operator>()\n  const [display, setDisplay] = useState<string>('0')\n\n  const calculate = (rightOperand: number, pendingOperator: Operator): boolean => {\n    let newResult = result\n\n    switch (pendingOperator) {\n      case '+':\n        newResult += rightOperand\n        break\n      case '-':\n        newResult -= rightOperand\n        break\n      case '×':\n        newResult *= rightOperand\n        break\n      case '÷':\n        if (rightOperand === 0) {\n          return false\n        }\n\n        newResult /= rightOperand\n    }\n\n    setResult(newResult)\n    setDisplay(newResult.toString().toString().slice(0, 12))\n\n    return true\n  }\n\n  // Pad buttons handlers\n  const onDigitButtonClick = (digit: Digit) => {\n    let newDisplay = display\n\n    if ((display === '0' && digit === 0) || display.length > 12) {\n      return\n    }\n\n    if (waitingForOperand) {\n      newDisplay = ''\n      setWaitingForOperand(false)\n    }\n\n    if (display !== '0') {\n      newDisplay = newDisplay + digit.toString()\n    } else {\n      newDisplay = digit.toString()\n    }\n\n    setDisplay(newDisplay)\n  }\n\n  const onPointButtonClick = () => {\n    let newDisplay = display\n\n    if (waitingForOperand) {\n      newDisplay = '0'\n    }\n\n    if (newDisplay.indexOf('.') === -1) {\n      newDisplay = newDisplay + '.'\n    }\n\n    setDisplay(newDisplay)\n    setWaitingForOperand(false)\n  }\n\n  const onOperatorButtonClick = (operator: Operator) => {\n    const operand = Number(display)\n\n    if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\n      if (!calculate(operand, pendingOperator)) {\n        return\n      }\n    } else {\n      setResult(operand)\n    }\n\n    setPendingOperator(operator)\n    setWaitingForOperand(true)\n  }\n\n  const onChangeSignButtonClick = () => {\n    const value = Number(display)\n\n    if (value > 0) {\n      setDisplay('-' + display)\n    } else if (value < 0) {\n      setDisplay(display.slice(1))\n    }\n  }\n\n  const onEqualButtonClick = () => {\n    const operand = Number(display)\n\n    if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\n      if (!calculate(operand, pendingOperator)) {\n        return\n      }\n\n      setPendingOperator(undefined)\n    } else {\n      setDisplay(operand.toString())\n    }\n\n    setResult(operand)\n    setWaitingForOperand(true)\n  }\n\n  const onAllClearButtonClick = () => {\n    setMemory(0)\n    setResult(0)\n    setPendingOperator(undefined)\n    setDisplay('0')\n    setWaitingForOperand(true)\n  }\n\n  const onClearEntryButtonClick = () => {\n    setDisplay('0')\n    setWaitingForOperand(true)\n  }\n\n  const onMemoryRecallButtonClick = () => {\n    setDisplay(memory.toString())\n    setWaitingForOperand(true)\n  }\n\n  const onMemoryClearButtonClick = () => {\n    setMemory(0)\n    setWaitingForOperand(true)\n  }\n\n  const onMemoryPlusButtonClick = () => {\n    setMemory(memory + Number(display))\n    setWaitingForOperand(true)\n  }\n\n  const onMemoryMinusButtonClick = () => {\n    setMemory(memory - Number(display))\n    setWaitingForOperand(true)\n  }\n\n  return (\n    <>\n    <StyledApp>\n      <Display value={display} hasMemory={memory !== 0} expression={typeof pendingOperator !== 'undefined' ? `${result}${pendingOperator}${waitingForOperand ? '' : display}` : ''} />\n      <Pad\n        onDigitButtonClick={onDigitButtonClick}\n        onPointButtonClick={onPointButtonClick}\n        onOperatorButtonClick={onOperatorButtonClick}\n        onChangeSignButtonClick={onChangeSignButtonClick}\n        onEqualButtonClick={onEqualButtonClick}\n        onAllClearButtonClick={onAllClearButtonClick}\n        onClearEntryButtonClick={onClearEntryButtonClick}\n        onMemoryRecallButtonClick={onMemoryRecallButtonClick}\n        onMemoryClearButtonClick={onMemoryClearButtonClick}\n        onMemoryPlusButtonClick={onMemoryPlusButtonClick}\n        onMemoryMinusButtonClick={onMemoryMinusButtonClick}\n      />\n    </StyledApp>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport App from './components/App/App'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}